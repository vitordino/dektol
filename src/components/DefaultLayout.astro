---
import 'wipe.css'
import Header from '~/components/Header.astro'
import generateCssVariables from '~/utils/generateCssVariables'
import getHomeDocument from '~/utils/getHomeDocument'
import { AstroSeo } from '@astrolib/seo'

type AstroSeoProps = Parameters<typeof AstroSeo>[0]
type OpenGraphMedia = NonNullable<NonNullable<NonNullable<AstroSeoProps>['openGraph']>['images']>[number]

export type Props = {
  headerTitle?: string
  metaTitle?: string
  metaDescription?: string
  metaImage?: OpenGraphMedia
  background?: string
  foreground?: string
}

const props = Astro.props as Props
const { headerTitle } = props

const homeDocument = await getHomeDocument()

const background = props.background || homeDocument?.background 
const foreground = props.foreground || homeDocument?.foreground 

const title = props.metaTitle ? `${props.metaTitle} â¸¬ ${homeDocument?.meta_title}` : homeDocument?.meta_title || undefined

const seoProps: AstroSeoProps = {
  title,
  description: props.metaDescription || homeDocument?.meta_description || undefined,
  openGraph: { 
    title,
    description: props.metaDescription || homeDocument?.meta_description || undefined,
    images:
      props.metaImage
        ? [props.metaImage]
        : homeDocument?.meta_image?.url
          ? [
            {
              url: homeDocument.meta_image.url,
              alt: homeDocument.meta_image.alt || undefined,
              ...homeDocument.meta_image.dimensions,
            }]
          : undefined
  }
}

const wrapperStyle = generateCssVariables({ background, foreground })
---

<html lang='en' data-js='false'>
  <head>
    <meta charset='utf-8' />
    <meta name='viewport' content='width=device-width' />
    <AstroSeo {...seoProps} />

    <link rel="icon" href="/favicon.ico" sizes="any">
    <link rel="icon" href="/favicon.svg" type="image/svg+xml">
    <link rel="apple-touch-icon" href="/apple-touch-icon.png">
    <link rel="manifest" href="/manifest.webmanifest">

    <script is:inline>
      if (typeof window.queueMicrotask !== 'function') {
        window.queueMicrotask = callback => Promise.resolve().then(callback)
      }
    </script>
    <script is:inline>
      const onLoadImage = element => {
        element.setAttribute('data-loaded', 'true')
        element.removeEventListeneer(onLoadImage)
      }
      const handleImageLoad = element => {
        if (element.complete) return element.setAttribute('data-loaded', 'true')
        element.addEventListener('load', onLoadImage)
      }
      window.handleImageLoad = handleImageLoad
    </script>
    <script is:inline>
      const switchDataJSAttribute = () => document.documentElement.setAttribute('data-js', 'true')
      window.addEventListener('load', switchDataJSAttribute)
    </script>
  </head>
  <body style={wrapperStyle}>
    <Header title={headerTitle} />
    <slot />
  </body>
</html>

<style is:global>
  body {
    color: var(--foreground);
    background-color: var(--background);
    font-family: sans-serif;
  }
</style>
